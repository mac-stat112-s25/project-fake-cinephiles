[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lights, Camera, Action!: Comparing Movie Reviewing Website Ratings",
    "section": "",
    "text": "Final Report\nFor a video version of this report, please view the video here(and view slides utilized here).\nMotivation\nColette and Julia both utilize Letterboxd and enjoy films; we both are aware that the typical Letterboxd user tends to be a “cinephile”, trending towards a movie snob rather than a casual enjoyer. People may be surprised by a low Letterboxd average score for a film, but we both take it with a grain of salt because Letterboxd users often do not rate movies very high despite enjoying it. However, is the idea of Letterboxd actually rating films lower than other rating websites true, or is this a bias we have that is only founded on the perceived culture of the app? It is with this in mind we hope to explore top films’ ratings on Letterboxd and IMDb to compare if Letterboxd actually rates them lower than the more popular site. This information would help us to better understand the culture of both rating sites, and help those looking at movie ratings better understand the rating of a film in context.\nResearch Questions\n\nHow do average Letterboxd scores compare to average IMDb scores for top films?\nDoes Letterboxd rate films lower than IMDb?\n\nDetermine if the perceived culture of Letterboxd actually translates to how people rate films.\nWe hope to communicate information about typical ratings patterns on each website to help users make more informed movie selections.\n\nBackground\nLetterboxd is an app popularized in recent years, made for logging movie watches and reviews. Letterboxd scores out of five stars. In the app, there’s a list of the top 250 movies based on average user ratings. In popular culture, Letterboxd is seen as a website for people who are more serious about movies, usually being tougher critics than other internet reviewers.\nIMDb, standing for “The Internet Movie Database”, is a website displaying information about movies, including cast, year, and trivia. Users can also rate movies out of 10 on IMDb. The website has a list of the top 1000 movies rated by users. IMDb is a lot more popular than Letterboxd, so reviews are usually taken as a general consensus for casual movie-watchers.\nData\nLetterboxd Data\nLink to Kaggle Page\nThis data was collected from the Letterboxd official top 250 movies page and then scraped using selenium and beautiful soup as of 4/09/24. It was collected by Riyosha on Kaggle, which is where we collected the data. The data consists of star ratings of each movie from the top 250, reviews for each rating if available, the date the movie was watched by the user, if the watch was a first-time watch or a rewatch, and the name of the movie. There are over 90,000 reviews overall, with about 360 reviews for each movie. There are both categorical and numerical measurements. Before we start, we need to convert the star ratings to decimals, and make each rating out of 10 to match the IMDb rating. There are also some NA values that need to be cleaned up.\nIMDb Data\nLink to Kaggle Page\nThis data shows the ranking of the top 1000 movies, the title of each movie, the genre, a brief plot description, director, lead actors, year of release, runtime, rating out of ten, and user votes (how many users watched/rated). This data was last updated 6 months ago. The data was collected from the IMDb website, and licensed through public domain, and posted to Kaggle, where we found the data. There are 1000 data points, one for each movie. All variables except rating are categorical. We have to clean movie titles in order to match and join them with the Letterboxd data, and select only the needed variables and data points to analyze this data.\nFindings\nLetterBoxd Data\n\n\n\n\n\n\n\n\nIMDb Data\n\n\n\n\n\n\n\n\nMerged Data\n\n\n\n\n\n\nOverall, the data gave a pretty linear conclusion: as Letterboxd scores increase, IMDb scores also tend to increase. There are a few outliers (that are usually rated much lower on Letterboxd than on IMDb) to this relationship. Most reviews were pretty positive on both ends, however, considering that the Letterboxd data we took from was the top-rated 250 movies on the site. The relationship is linear to a pretty mild extent, with Letterboxd ratings usually being more stagnant than IMDb ones for the movies we observed. We were a little surprised how similar most of the reviews seem to be on both sites, considering the cultural reputation of Letterboxd and Letterboxd users.\nConclusions / Big Picture\nFor the most part, if a movie is good, both popular and more critical audiences will rate it accordingly. Letterboxd users, for specific movies, seem to be tougher critics, but given the increasing popularity of the website and how many users rate movies highly, the results mostly align with IMDb opinions. This all seems to prove that the actual ratings of Letterboxd are usually preceded by its reputation, which is, for the most part, pretty untrue.\nLimitations and Future Work\nIt was a struggle trying to merge the Letterboxd and IMDb data, since there were a lot of movies in the Letterboxd top 250 dataset that didn’t have matches in the IMDb dataset, and vice versa, which didn’t seem to make a lot of sense. For example, I looked up all four of my top four movies in the IMDb dataset, three of which are in the Letterboxd top 250, and did not find them. Additionally, the Letterboxd data didn’t guarantee the average review on the website for each movie, since it only took around 360 reviews for each movie. For example, we noticed “Parasite”, one of the highest-rated movies on Letterboxd with a 4.5/5 rating had very low ratings in the data. This is the biggest outlier. This is a limitation of the data itself that reflected in our viz and analysis. Removing NA values also might have constricted our dataset and analysis. Future questions might include observations about if movies on Letterboxd are usually rated higher or lower based on rewatch, the average ratings of individual Letterboxd and IMDb users, and high-rated movies that are most frequently on Letterboxd users top four (a place on a profile where users can display their favorite four movies).\nVideo Report\nVideo:\n\n\n\n\n\n\n\n\n\nSlides:",
    "crumbs": [
      "Final Report"
    ]
  },
  {
    "objectID": "eda/colette-l.html",
    "href": "eda/colette-l.html",
    "title": "Colette’s EDA",
    "section": "",
    "text": "Colette’s EDA\n\n\n# A tibble: 1 × 9\n   rows columns discrete_columns continuous_columns all_missing_columns\n  &lt;int&gt;   &lt;int&gt;            &lt;int&gt;              &lt;int&gt;               &lt;int&gt;\n1 90016       6                5                  1                   0\n# ℹ 4 more variables: total_missing_values &lt;int&gt;, complete_rows &lt;int&gt;,\n#   total_observations &lt;int&gt;, memory_usage &lt;dbl&gt;\n\n\n# A tibble: 1 × 9\n   rows columns discrete_columns continuous_columns all_missing_columns\n  &lt;int&gt;   &lt;int&gt;            &lt;int&gt;              &lt;int&gt;               &lt;int&gt;\n1  1000      12                5                  7                   0\n# ℹ 4 more variables: total_missing_values &lt;int&gt;, complete_rows &lt;int&gt;,\n#   total_observations &lt;int&gt;, memory_usage &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                          Descriptions   Value\n1                                   Sample size (nrow)   90016\n2                              No. of variables (ncol)       6\n3                    No. of numeric/interger variables       1\n4                              No. of factor variables       0\n5                                No. of text variables       5\n6                             No. of logical variables       0\n7                          No. of identifier variables       1\n8                                No. of date variables       0\n9             No. of zero variance variables (uniform)       0\n10               %. of variables having complete cases 50% (3)\n11   %. of variables having &gt;0% and &lt;50% missing cases 50% (3)\n12 %. of variables having &gt;=50% and &lt;90% missing cases  0% (0)\n13          %. of variables having &gt;=90% missing cases  0% (0)\n\n\n                                          Descriptions       Value\n1                                   Sample size (nrow)        1000\n2                              No. of variables (ncol)          12\n3                    No. of numeric/interger variables           7\n4                              No. of factor variables           0\n5                                No. of text variables           5\n6                             No. of logical variables           0\n7                          No. of identifier variables           2\n8                                No. of date variables           0\n9             No. of zero variance variables (uniform)           0\n10               %. of variables having complete cases 83.33% (10)\n11   %. of variables having &gt;0% and &lt;50% missing cases  16.67% (2)\n12 %. of variables having &gt;=50% and &lt;90% missing cases      0% (0)\n13          %. of variables having &gt;=90% missing cases      0% (0)",
    "crumbs": [
      "EDA",
      "Colette's EDA"
    ]
  },
  {
    "objectID": "eda/julia-p.html",
    "href": "eda/julia-p.html",
    "title": "Julia’s EDA",
    "section": "",
    "text": "Exploring the IMDb Data\n\nCode# import relevant packages\nlibrary(tidyverse)\nlibrary(here)\n\n# load the newly imdb dataset which has been cleaned \nimdb_cleaned &lt;-read_csv(here(\"data\",\"cleaned_imdb.csv\"))\n\n\nResearch Questions:\n\n\nWhat are the top 10 highest rated movies?\n\nCodetop_10_movies &lt;- imdb_cleaned |&gt;\n  arrange(desc(Rating)) |&gt;\n  slice_head(n = 10)\n\ntop_10_movies\n\n# A tibble: 10 × 2\n   Title                 Rating\n   &lt;chr&gt;                  &lt;dbl&gt;\n 1 El árbol de la horca      10\n 2 Mayamma                   10\n 3 Kaputol                   10\n 4 Rainy in Glenageary       10\n 5 It's a Love Thang         10\n 6 Olu Bliss: Dive In        10\n 7 Tetonica Castro: Home     10\n 8 Ixel                      10\n 9 Nuriya: Tanita            10\n10 Pandemania                10\n\n\n\n\nWhat are the bottom 10 lowest rated movies?\n\nCodebottom_10_movies &lt;- imdb_cleaned |&gt;\n  arrange(Rating) |&gt;\n  slice_head(n = 10)\n\nbottom_10_movies\n\n# A tibble: 10 × 2\n   Title                      Rating\n   &lt;chr&gt;                       &lt;dbl&gt;\n 1 Husaren heraus                  1\n 2 Steckler Interviews             1\n 3 Soldier Comrades                1\n 4 The Case He Couldn't Crack      1\n 5 Reality                         1\n 6 Weavers of Fortune              1\n 7 Das Gesetz der Wüste            1\n 8 Das verschwundene Haus          1\n 9 Zirkus Renz                     1\n10 Der Abenteurer                  1\n\n\n\n\nWhat is the distribution of scores like (how many films for each score?)?\n\nCodeimdb_cleaned |&gt;\n  ggplot(aes(x = Rating)) +\n  geom_bar(fill = \"#69b3a2\") +\n  labs(\n    title = \"Distribution of IMDb Movie Ratings\",\n    x = \"Rating\",\n    y = \"Number of Movies\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nExploring the Letterboxd Data\n\nCode# use cleaning steps from letterboxdCleaning.qmd:\n# import relevant packages\nlibrary(tidyverse)\n\n# import data\nletterboxd_data &lt;- read_csv(here(\"data\", \"letterboxd_250movie_reviews.csv\"))\n\nletterboxd_convertStars &lt;-letterboxd_data |&gt;\n  mutate(numerical_rating = fct_recode(Rating, \"5\" = \"★★★★★\",\n                                       \"4.5\" = \"★★★★½\", \n                                        \"4\" = \"★★★★\",\n                                       \"3.5\" = \"★★★½\",\n                                        \"3\" = \"★★★\",\n                                        \"2.5\" = \"★★½\", \n                                        \"2\" = \"★★\",\n                                       \"1.5\" =  \"★½\",\n                                        \"1\" = \"★\",\n                                       \".5\" = \"½\"))\n\nletterboxd_clean &lt;- letterboxd_convertStars |&gt;\n  filter(!is.na(numerical_rating)) |&gt;\n  mutate(\n    numerical_rating = as.numeric(as.character(numerical_rating)),\n    out_of_ten = numerical_rating *2) |&gt;\n  group_by(Movie) |&gt;\n  summarise(\n    avg_rating = mean(out_of_ten, na.rm = TRUE),\n  ) |&gt; \narrange(desc(avg_rating))\n\n\nResearch Questions:\n\n\nWhat are the top 10 highest rated movies?\n\nCodetop_10_movies &lt;- letterboxd_clean |&gt;\n  arrange(desc(avg_rating)) |&gt;\n  slice_head(n = 10)\n\ntop_10_movies\n\n# A tibble: 10 × 2\n   Movie                                        avg_rating\n   &lt;chr&gt;                                             &lt;dbl&gt;\n 1 12-angry-men                                       9.60\n 2 the-empire-strikes-back                            9.54\n 3 singin-in-the-rain                                 9.51\n 4 the-lord-of-the-rings-the-return-of-the-king       9.51\n 5 the-good-the-bad-and-the-ugly                      9.48\n 6 inglourious-basterds                               9.48\n 7 the-human-condition-iii-a-soldiers-prayer          9.47\n 8 spider-man-into-the-spider-verse                   9.47\n 9 its-a-wonderful-life                               9.46\n10 terminator-2-judgment-day                          9.45\n\n\n\n\nWhat are the bottom 10 lowest rated movies (of the top 250)?\n\nCodebottom_10_movies &lt;- letterboxd_clean |&gt;\n  arrange(avg_rating) |&gt;\n  slice_head(n = 10)\n\nbottom_10_movies\n\n# A tibble: 10 × 2\n   Movie                             avg_rating\n   &lt;chr&gt;                                  &lt;dbl&gt;\n 1 parasite                                4.86\n 2 war-and-peace                           6.22\n 3 heat                                    6.49\n 4 eureka                                  6.91\n 5 monster                                 7.56\n 6 marcel-the-shell-with-shoes-on          7.9 \n 7 everything-everywhere-all-at-once       7.99\n 8 life-is-beautiful                       7.99\n 9 the-lives-of-others                     8.19\n10 8-half                                  8.49\n\n\n\n\nWhat is the distribution of scores like (how many films for each score?)?\n\nCodeletterboxd_clean %&gt;%\n  ggplot(aes(x = avg_rating)) +\n  geom_histogram(binwidth = 0.5, fill = \"#69b3a2\", color = \"black\", alpha = 0.7) +\n  labs(\ntitle = \"Distribution of Letterboxd Top 250 Movie Ratings\",\nx = \"Rating\",\ny = \"Number of Movies\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(breaks = seq(0, 10, 1)) # Adjust x-axis breaks\n\n\n\n\n\n\n\n\nExploring the Merged Data\n\nCode# Import the merged dataset (created in the mergingData file!)\n\n# import data\nmerged_data &lt;- read_csv(here(\"data\", \"merged_data\"))\n\n# clean of the 4 NA values\nmerged_data &lt;- merged_data |&gt;\n  drop_na()\n\n\nExploring the data:\n\nCodehead(merged_data)\n\n# A tibble: 6 × 3\n  Title                 letterboxd_score imdb_score\n  &lt;chr&gt;                            &lt;dbl&gt;      &lt;dbl&gt;\n1 12angrymen                        9.60        9  \n2 2001aspaceodyssey                 9.27        8.3\n3 4months3weeksand2days             8.78        7.9\n4 abrightersummerday                9.26        8.2\n5 amanescaped                       8.86        8.2\n6 amatteroflifeanddeath             8.94        8  \n\nCodestr(merged_data)\n\ntibble [246 × 3] (S3: tbl_df/tbl/data.frame)\n $ Title           : chr [1:246] \"12angrymen\" \"2001aspaceodyssey\" \"4months3weeksand2days\" \"abrightersummerday\" ...\n $ letterboxd_score: num [1:246] 9.6 9.27 8.78 9.26 8.86 ...\n $ imdb_score      : num [1:246] 9 8.3 7.9 8.2 8.2 8 8.3 8.1 8 8.1 ...\n\nCodesummary(merged_data)\n\n    Title           letterboxd_score   imdb_score   \n Length:246         Min.   :4.863    Min.   :6.700  \n Class :character   1st Qu.:8.826    1st Qu.:8.000  \n Mode  :character   Median :8.991    Median :8.200  \n                    Mean   :8.955    Mean   :8.196  \n                    3rd Qu.:9.200    3rd Qu.:8.400  \n                    Max.   :9.597    Max.   :9.300  \n\n\n\nCode# Distribution of IMDb and Letterboxd scores\nggplot(merged_data, aes(x = imdb_score)) + \n  geom_histogram(binwidth = 0.5, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Distribution of IMDb Scores\")\n\n\n\n\n\n\nCodeggplot(merged_data, aes(x = letterboxd_score)) + \n  geom_histogram(binwidth = 0.5, fill = \"green\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Distribution of Letterboxd Scores\")\n\n\n\n\n\n\nCode# relationshihp\nggplot(merged_data, aes(x = imdb_score, y = letterboxd_score)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  labs(title = \"IMDb vs Letterboxd Scores\")\n\n\n\n\n\n\nCode# Boxplot to check for outliers in scores\nggplot(merged_data, aes(y = imdb_score)) + \n  geom_boxplot(fill = \"lightblue\", color = \"black\") + \n  labs(title = \"Boxplot of IMDb Scores\")\n\n\n\n\n\n\nCodeggplot(merged_data, aes(y = letterboxd_score)) + \n  geom_boxplot(fill = \"lightgreen\", color = \"black\") + \n  labs(title = \"Boxplot of Letterboxd Scores\")",
    "crumbs": [
      "EDA",
      "Julia's EDA"
    ]
  },
  {
    "objectID": "eda/imdbCleaning.html",
    "href": "eda/imdbCleaning.html",
    "title": "IMDb Cleaning",
    "section": "",
    "text": "Data Source: https://developer.imdb.com/non-commercial-datasets/\nselecting title.basics.tsv.gz and title.ratings.tsv.gz\n\n# import relevant packages\nlibrary(tidyverse)\nlibrary(here)\n\n# load the datasets\n# title_basics &lt;- read_tsv(\"../data/title.basics.tsv\", na = \"\\\\N\", quote = \"\")\n# title_ratings &lt;- read_tsv(\"../data/title.ratings.tsv\", na = \"\\\\N\", quote = \"\")\n\n\n# # select only movies from the titles \n# movies &lt;- title_basics %&gt;%\n#   filter(titleType == \"movie\")\n# \n# # merge the datasets\n# movie_ratings &lt;- movies %&gt;%\n#   inner_join(title_ratings, by = \"tconst\")\n# \n# # select only relevant columns\n# imdb_cleaned &lt;- movie_ratings %&gt;%\n#   select(Title = primaryTitle, Rating = averageRating)\n\n\n# save cleaned data to csv to save space on device\n# write_csv(imdb_cleaned, \"../data/cleaned_imdb.csv\")",
    "crumbs": [
      "EDA",
      "IMDb Cleaning"
    ]
  },
  {
    "objectID": "eda/letterboxdCleaning.html",
    "href": "eda/letterboxdCleaning.html",
    "title": "Letterboxd Cleaning",
    "section": "",
    "text": "library(tidyverse) \nlibrary(here)\n\n\n# import data from data folder of repo\nletterboxd_data &lt;- read_csv(here(\"data\", \"letterboxd_250movie_reviews.csv\"))\n\n\nletterboxd_data |&gt;\n  head()\n\n# A tibble: 6 × 6\n   ...1 Review                                         Rating Date  Status Movie\n  &lt;dbl&gt; &lt;chr&gt;                                          &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1     0 \"I am an idiot. Why is it that I still dread … ★★★★★  01 D… Watch… hara…\n2     1 \"honor in the individual is virtue honor in a… ★★★★★  18 J… &lt;NA&gt;   hara…\n3     2 \"Brilliant. Riveting exploration of mortality… &lt;NA&gt;   26 J… Watch… hara…\n4     3 \"God damn what an impeccable film. Not dated … ★★★★★  21 J… Watch… hara…\n5     4 \"95First thing's first: giving a big thanks t… ★★★★★  06 S… Watch… hara…\n6     5 \"Probably the greatest film ever.. a film abo… ★★★★★  14 A… Watch… hara…\n\n\n\nletterboxd_convertStars &lt;-letterboxd_data |&gt;\n  mutate(numerical_rating = fct_recode(Rating, \"5\" = \"★★★★★\",\n                                       \"4.5\" = \"★★★★½\", \n                                        \"4\" = \"★★★★\",\n                                       \"3.5\" = \"★★★½\",\n                                        \"3\" = \"★★★\",\n                                        \"2.5\" = \"★★½\", \n                                        \"2\" = \"★★\",\n                                       \"1.5\" =  \"★½\",\n                                        \"1\" = \"★\",\n                                       \".5\" = \"½\"))\n\n\n#select only movie title and rating categories, and update the review to a 1-10 scale instead of 1-5, make movie titles spaced out and not dashes\nletterboxd_clean &lt;- letterboxd_convertStars |&gt;\n  filter(!is.na(numerical_rating)) |&gt;\n  mutate(\n    numerical_rating = as.numeric(as.character(numerical_rating)),\n    out_of_ten = numerical_rating *2) |&gt;\n  group_by(Movie) |&gt;\n  summarise(\n    avg_rating = mean(out_of_ten, na.rm = TRUE),\n  ) |&gt; \narrange(desc(avg_rating)) |&gt;\n  mutate(movie_titles = str_replace_all(Movie, \"-\", \" \")) |&gt;\n  select(movie_titles, avg_rating)\n\n\n# preview code\nhead(letterboxd_clean)\n\n# A tibble: 6 × 2\n  movie_titles                                 avg_rating\n  &lt;chr&gt;                                             &lt;dbl&gt;\n1 12 angry men                                       9.60\n2 the empire strikes back                            9.54\n3 singin in the rain                                 9.51\n4 the lord of the rings the return of the king       9.51\n5 the good the bad and the ugly                      9.48\n6 inglourious basterds                               9.48\n\n# write_csv(letterboxd_clean, \"../data/cleaned_letterboxd.csv\")",
    "crumbs": [
      "EDA",
      "Letterboxd Cleaning"
    ]
  },
  {
    "objectID": "eda/mergingData.html",
    "href": "eda/mergingData.html",
    "title": "Combining the Letterboxd and IMDb Datasets",
    "section": "",
    "text": "A file to work on creating a cleaned dataset\nImport datasets and clean them using steps established in cleaning files\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(fuzzyjoin)\nlibrary(here)\n\n\n# function for standardizing title\nnormalize_titles &lt;- function(title) {\n  title |&gt;\n    str_to_lower() |&gt;\n    str_replace_all(\"[:punct:]\", \"\") |&gt;\n    str_replace_all(\"\\\\s+\", \"\") |&gt;\n    str_trim()\n}\n\n# Load the newly cleaned IMDb dataset\nimdb_cleaned &lt;- read_csv(here(\"data\",\"cleaned_imdb.csv\"))\n\n# lowercase the imdb titles\nimdb_lower &lt;- imdb_cleaned |&gt;\n  mutate(Title = normalize_titles(Title))\n\n# --------------------------------------------------------------------\n\n# Import the Letterboxd dataset\nletterboxd_data &lt;- read_csv(here(\"data\",\"letterboxd_250movie_reviews.csv\"))\n\nletterboxd_clean &lt;- letterboxd_data |&gt;\n  mutate(numerical_rating = fct_recode(Rating,\n    \"5\" = \"★★★★★\", \"4.5\" = \"★★★★½\", \"4\" = \"★★★★\",\n    \"3.5\" = \"★★★½\", \"3\" = \"★★★\", \"2.5\" = \"★★½\",\n    \"2\" = \"★★\", \"1.5\" = \"★½\", \"1\" = \"★\", \".5\" = \"½\"\n  )) |&gt;\n  filter(!is.na(numerical_rating)) |&gt;\n  mutate(\n    numerical_rating = as.numeric(as.character(numerical_rating)),\n    out_of_ten = numerical_rating * 2\n  ) |&gt;\n  group_by(Movie) |&gt;\n  summarise(avg_rating = mean(out_of_ten, na.rm = TRUE)) |&gt;\n  mutate(Title = normalize_titles(Movie)) |&gt;\n  select(Title, avg_rating)\n\nMerge Files\n\n#make sure IMDB data is unique:\nimdb_lower_unique &lt;- imdb_lower |&gt;\n  group_by(Title) |&gt;\n  slice_max(Rating, n = 1, with_ties = FALSE) |&gt;  # or another criteria\n  ungroup()\n\n# Merge Letterboxd and IMDb data\nmerged &lt;- letterboxd_clean |&gt;\n  rename(letterboxd_score = avg_rating) |&gt;\n  left_join(imdb_lower_unique, by = \"Title\") |&gt;\n  rename(imdb_score = Rating)\n\n# -------------------- Checks ----------------------------------\n\n# How many rows matched\nnrow(merged)\n\n[1] 250\n\n# How many are missing IMDb scores\nsum(is.na(merged$imdb_score))\n\n[1] 21\n\n# Check how many matches exist between IMDb and the rest of the data\nsum(!is.na(merged$imdb_score))\n\n[1] 229\n\n# Preview of the merged data\nhead(merged)\n\n# A tibble: 6 × 3\n  Title                 letterboxd_score imdb_score\n  &lt;chr&gt;                            &lt;dbl&gt;      &lt;dbl&gt;\n1 12angrymen                        9.60        9  \n2 2001aspaceodyssey                 9.27        8.3\n3 4months3weeksand2days             8.78        7.9\n4 8half                             8.49       NA  \n5 abrightersummerday                9.26        8.2\n6 amanescaped                       8.86        8.2\n\n# Check what cases did not find a match\nmerged |&gt; filter(is.na(imdb_score)) |&gt; pull(Title)\n\n [1] \"8half\"                         \"apursansar\"                   \n [3] \"evangelion3010thriceuponatime\" \"happytogether1997\"            \n [5] \"lesamourai\"                    \"letrou\"                       \n [7] \"malcolmx1992\"                  \"mommy2014\"                    \n [9] \"nostalgia1983\"                 \"oppenheimer2023\"              \n[11] \"perfectdays2023\"               \"ritual2000\"                   \n[13] \"singsing2023\"                  \"theempirestrikesback\"         \n[15] \"thefather2020\"                 \"thehunt2012\"                  \n[17] \"theweepingmeadow\"              \"threecoloursred\"              \n[19] \"underground1995\"               \"whiplash2014\"                 \n[21] \"witnessfortheprosecution1957\" \n\n\n\n# Manually fill in missing values\n\n# some are not present in the IMDB data! they are as follows:\n  # 8half, apursansar, lesamourai, theweepingmeadow                \n\nmerged_data &lt;- merged |&gt; \n  mutate(imdb_score = case_when(\n\n    Title == \"evangelion3010thriceuponatime\" ~ 8.0,\n    Title == \"happytogether1997\" ~ 7.7,\n    Title == \"letrou\" ~ 6.9,\n    Title == \"malcolmx1992\" ~ 7.7,\n    Title == \"mommy2014\" ~ 8.0,\n    Title == \"nostalgia1983\" ~ 7.8,\n    Title == \"oppenheimer2023\" ~ 8.3,\n    Title == \"perfectdays2023\" ~ 7.9,\n    Title == \"ritual2000\" ~ 7.5,\n    Title == \"singsing2023\" ~ 7.7,\n    Title == \"theempirestrikesback\" ~ 8.7,\n    Title == \"thefather2020\" ~ 8.2,\n    Title == \"thehunt2012\" ~ 8.3,\n    Title == \"threecoloursred\" ~ 8.1,\n    Title == \"underground1995\" ~ 8.0,\n    Title == \"whiplash2014\" ~ 8.5,\n    Title == \"witnessfortheprosecution1957\" ~ 8.4,\n    TRUE ~ imdb_score  # Keep existing scores\n  ))\n\n# -------------------- Checks ----------------------------------\n\n# How many rows matched\nnrow(merged_data)\n\n[1] 250\n\n# How many are missing IMDb scores\nsum(is.na(merged_data$imdb_score))\n\n[1] 4\n\n# Check how many matches exist between IMDb and the rest of the data\nsum(!is.na(merged_data$imdb_score))\n\n[1] 246\n\n# Check what cases did not find a match\nmerged_data |&gt; filter(is.na(imdb_score)) |&gt; pull(Title)\n\n[1] \"8half\"            \"apursansar\"       \"lesamourai\"       \"theweepingmeadow\"\n\n\n\n# explort the merged dataset for easier use later\n\nwrite_csv(merged_data, \"../data/merged_data\")",
    "crumbs": [
      "EDA",
      "Combining the Letterboxd and IMDb Datasets"
    ]
  },
  {
    "objectID": "eda/testingViz.html",
    "href": "eda/testingViz.html",
    "title": "Testing Visualizations",
    "section": "",
    "text": "A file for testing different visualizations of the data",
    "crumbs": [
      "EDA",
      "Testing Visualizations"
    ]
  },
  {
    "objectID": "et/Julia-P.html",
    "href": "et/Julia-P.html",
    "title": "Julia - Effective Teamwork Summary",
    "section": "",
    "text": "4 Characteristics of an Effective Team - Harvard Business School, Kate Gibson, 02 May 2024\nArticle Summary:\nToday’s work environment is VUCA: volitile, uncertain, complex, and ambiguous. In this environment teams need to be flexible. Teams can adapt best if they practice proactive learning, flexibility, and resilience. Practicing these things means there also must be clear expectations and support. The article highlights four key characteristics of effective teams.\n1) Dynamic Teaming - Dynamic teams have a “fluid membership” which is more able to shift tasks and roles around\n2) Psychological Safety - it is important to make sure the workplace is psychologically safe where everyone is comfortable asking questions, taking risks, accepting failure, helping each other, and having open conversations.\n3) Diversity - teams work best when there is a variety of race, gender, culture/nationality, background/upbringing, skills, expertise, etc\n4) Inclusive- value DEI (diversity, equity, and inclusion), and involve members in decision making",
    "crumbs": [
      "Effective Teamwork",
      "Julia - Effective Teamwork Summary"
    ]
  },
  {
    "objectID": "et/Colette-L.html",
    "href": "et/Colette-L.html",
    "title": "Colette - Effective Teamwork Summary",
    "section": "",
    "text": "Effective teamwork article - https://hr.berkeley.edu/hr-network/central-guide-managing-hr/managing-hr/interaction/team-building/steps\nIn order to build an effective team, there’s a lot of collaboration needed by everyone. Communicate your ideas clearly, and treat everyone’s ideas with the same amount of respect. Trust your teammates. If problems arise, let everyone know what it is and try to solve it together. If you have ground rules, a clear goal, and steps to achieve that goal, each teammate knows what they have to do to have the team succeed.",
    "crumbs": [
      "Effective Teamwork",
      "Colette - Effective Teamwork Summary"
    ]
  },
  {
    "objectID": "src/appx/proposal.html",
    "href": "src/appx/proposal.html",
    "title": "Appendix A — Proposal",
    "section": "",
    "text": "Lights, Camera, Action!: Comparing Movie Reviewing Website Ratings\nMembers: Colette Lawler, Julia Prewitt\n\n\nDescription of Project:\nWe’ll be examining how IMDB ratings for the top 1000 movies compare to the Letterboxd top 250, another movie review website to analyze how the two websites compare.\n\n\nReason for Selecting this Project:\nWe both found out we have letterboxd accounts and are aware of the very specific cultures associated with each site. We found data for both IMDB and Letterboxdand thought it would be interesting if we could map this information using visualizations.\n\n\nImplementation Plan\nProject Proposal- Toget Case Study Teamwork Reading Clean IMDB Data Explore IMDB Data Clean Letterboxd Data Explore Letterboxd Data Join data Explore joined data to compare Make visualizatinos of data Presentations Final Edits\na rough implementation and responsibility plan, ie, what needs to be accomplished and who will do what when. Think about the list of deliverables when building the plan. The plan should be presented in a table format.\n\n\n\n\n\n\n\n\nTask\nAssigned To\nDue Date\n\n\n\n\nProject Proposal\nBoth\n4/9\n\n\nCase Study\nBoth\n4/9\n\n\nTeamwork Reading\nBoth, Indiv.\n4/11\n\n\nClarify research question, background, data collection,\nJulia\n4/11\n\n\nEDA - Individual\nBoth\n4/14\n\n\nJoin and Explore data\nBoth\n4/16\n\n\nDecide on appropriate viz\nBoth\n4/18\n\n\nCreate viz\nBoth\n4/21\n\n\nWrite up data insights/conclusions\nColette\n4/23\n\n\nExplain limitations and future work\nJulia\n4/25\n\n\nPresentation Slides\nBoth\n4/28-30\n\n\nFinal Edits Done\nBoth\n5/2\n\n\nCreate Presentation video\nBoth\n5/5",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Proposal</span>"
    ]
  },
  {
    "objectID": "src/appx/case-study.html",
    "href": "src/appx/case-study.html",
    "title": "Appendix B — Case Study",
    "section": "",
    "text": "Observation of Crossword Scandal Article:\nVisualizations are used both in graphs and pictures (pictures of similar crossword clues and words are highlighted to show similarities, and graphs show the exact number of crosswords with similarities). Sideways bar graphs are used for comparison, which work well with the data being shown. Relevant information to the story is highlighted in different colors on graphs. There are also stacked bar graphs in the article, highlighting percentages instead of specific numbers of copied crosswords. Each visual is labelled, captioned, and colored in an easy-to-see way. There’s proper context for each of the graphs. The graphs support the story being told very well about plagiarism in the crossword community.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Case Study</span>"
    ]
  }
]